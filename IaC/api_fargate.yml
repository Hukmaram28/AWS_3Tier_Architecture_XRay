AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a cluster, ecs execution role, ecs task role, task definition, auto scaling policy, an ecs service for api microservice, log group for cloudWatch logs, target group for load balance, a load balancer, load balancer listener rules etc."

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "Parent Stack Names"
        Parameters: 
          - VpcStackName
          - RdsStackName
      - 
        Label: 
          default: "Service Parameters"
        Parameters: 
          - ApiServiceName
          - ApiImage
          - ApiContainerName
          - ApiHealthCheckPath
          - ApiMinContainers
          - ApiMaxContainers
          - ApiAutoScalingTargetValue

Parameters:
  VpcStackName:
    Default: vpc
    Description: "Please enter parent vpc stack name"
    Type: String

  RdsStackName:
    Default: rds
    Description: "Please enter rds stack name"
    Type: String
    
  ApiServiceName:
    Type: String
    Description: "Please enter service name for Api"
    Default: ApiService

  ApiImage:
    Type: String
    Default: 211125556960.dkr.ecr.us-east-1.amazonaws.com/crypteye-api-dev:379da8c

  ApiContainerName:
    Type: String
    Default: crypteye-api

  ApiHealthCheckPath:
    Type: String
    Default: /

  ApiMinContainers:
    Type: Number
    Default: 2

  ApiMaxContainers:
    Type: Number
    Default: 10

  ApiAutoScalingTargetValue:
    Type: Number
    Default: 70

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
      ClusterName: 
        Fn::ImportValue: !Sub ${RdsStackName}-EnvironmentName
      DefaultCapacityProviderStrategy:
        - Base: 0
          CapacityProvider: FARGATE
          Weight: 1
      ServiceConnectDefaults:
        Namespace: dev

  #A role needed by ECS
  ApiExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["", [!Ref ApiServiceName, ApiExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: ApiAccessToSecretsManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Resource: 
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/database/*"
              Action: 
                - "ssm:GetParameters"
            - Effect: Allow
              Action: "secretsmanager:GetSecretValue"
              Resource:
                - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:database*"

  #A role for the containers
  ApiTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["", [!Ref ApiServiceName, ApiTaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess'

  #A role needed for ECS
  ApiAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["", [!Ref ApiServiceName, ApiAutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"

  ApiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      Family: api-taskdefinition
      NetworkMode: awsvpc
      Cpu: 256
      Memory: 0.5GB
      ExecutionRoleArn: !Ref ApiExecutionRole
      TaskRoleArn: !Ref ApiTaskRole
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name:
            !Join
              - "-"
              - - !Ref ApiContainerName
                - Fn::ImportValue: !Sub ${RdsStackName}-EnvironmentName
          Image: !Ref ApiImage
          PortMappings:
            - ContainerPort:
                Fn::ImportValue: !Sub ${VpcStackName}-ApiContainerPort
              Protocol: HTTP
          Environment:
            - Name: ALB
              Value: !GetAtt LoadBalancer.DNSName
          Secrets:
            - Name: DB_HOST
              ValueFrom:
                Fn::ImportValue: !Sub ${RdsStackName}-ParameterStoreDBUrl
            - Name: DB_PORT
              ValueFrom:
                Fn::ImportValue: !Sub ${RdsStackName}-ParameterStoreDBPort
            - Name: MYSQL_DB_NAME
              ValueFrom:
                Fn::ImportValue: !Sub ${RdsStackName}-ParameterStoreDBName
            - Name: MYSQL_USER
              ValueFrom:
                !Join
                  - ":"
                  - - Fn::ImportValue: !Sub ${RdsStackName}-SecretsManagerDB
                    - "username::"
            - Name: MYSQL_PASSWORD
              ValueFrom:
                !Join
                  - ":"
                  - - Fn::ImportValue: !Sub ${RdsStackName}-SecretsManagerDB
                    - "password::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
        - Name: x-ray
          Essential: false
          Image: amazon/aws-xray-daemon:latest
          cpu: 32
          Memory: 256
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroupXrayApi
              awslogs-stream-prefix: ecs
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerHTTP
    Properties:
      ServiceName: !Ref ApiServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref ApiTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetApiAZ1
            - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetApiAZ2
          SecurityGroups:
            - Fn::ImportValue: !Sub ${VpcStackName}-ApiServerSecurityGroup
      LoadBalancers:
        - ContainerName: 
            !Join
              - "-"
              - - !Ref ApiContainerName
                - Fn::ImportValue: !Sub ${RdsStackName}-EnvironmentName
          ContainerPort:
            Fn::ImportValue: !Sub ${VpcStackName}-ApiContainerPort
          TargetGroupArn: !Ref TargetGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Ref ApiHealthCheckPath
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ["", [!Ref ApiServiceName, TargetGroup]]
      Port:
        Fn::ImportValue: !Sub ${VpcStackName}-ApiContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VPC
  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port:
        Fn::ImportValue: !Sub ${VpcStackName}-LoadBalancerPort
      Protocol: HTTP

  ListenerHTTPRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions: 
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions: 
        - Field: path-pattern
          Values:
            - /api/*
      ListenerArn: !Ref ListenerHTTP
      Priority: 2

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: 
        !Join 
          - ""
          - - Fn::ImportValue: !Sub ${RdsStackName}-EnvironmentName
            - "LoadBalancer"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::ImportValue: !Sub ${VpcStackName}-ALBSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${VpcStackName}-PublicSubnetWebAZ1
        - Fn::ImportValue: !Sub ${VpcStackName}-PublicSubnetWebAZ2
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["", [/ecs/, !Ref ApiServiceName, ApiTaskDefinition]]
  LogGroupXrayApi:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["", [/ecs/, !Ref ApiServiceName, Xray]]
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref ApiMinContainers
      MaxCapacity: !Ref ApiMaxContainers
      ResourceId: !Join ["/", [service, !Ref Cluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt ApiAutoScalingRole.Arn
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ["", [!Ref ApiServiceName, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: !Ref ApiAutoScalingTargetValue
Outputs:
  Cluster:
    Description: Cluster
    Value: !Ref Cluster
    Export:
      Name: !Sub ${AWS::StackName}-Cluster

  LoadBalancer:
    Description: LoadBalancer
    Value: !Ref LoadBalancer
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancer

  ListenerHTTP:
    Description: ListenerHTTP
    Value: !Ref ListenerHTTP
    Export:
      Name: !Sub ${AWS::StackName}-ListenerHTTP

  LoadBalancerUrl:
    Description: LoadBalancerUrl
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerUrl
